{"version":3,"file":"index.js","sources":["../src/utils.js","../src/CodeSection.js","../src/CodeFile.js","../src/CodeStore.js","../src/index.js"],"sourcesContent":["export function none(obj) {\n  return (obj === null || obj === undefined || (isNaN(obj) && obj === false))\n}\n\nexport function createSearch(collection, property) {\n  return function(value) {\n    return collection.find(c => c[property] === value)\n  }\n}\n\nexport function unless(exp, cb) {\n  if(none(exp)) {\n    cb()\n  }\n}\n\nexport function truncValues(obj, demark = '\\n', length = 80) {\n  let o = {}\n\n  for(let [key, value] of Object.entries(obj)) {\n    if(typeof value === 'string') {\n        const splits = value.split(demark)\n        if(splits.length > 1) {\n          value = splits[0] + '...' + splits[splits.length - 1]\n        }\n\n      if(value.length > length - 3) {\n        value = value.substr(0, length - 3) + '...'\n      }\n    }\n    o[key] = value\n  }\n  return o\n}\n","import debug from 'debug'\nimport {unless} from './utils'\nconst log = debug('CodeSection:log')\n\n\nclass CodeSection {\n  constructor(name) {\n    unless(name, () => { throw new SyntaxError('CodeSection must be instantiated with a name')})\n    this.name = name\n    this.blocks = []\n    this._children = null\n    this._source = []\n  }\n  get source() {\n    return this._source.join('\\n')\n  }\n  get children() {\n    return this._children\n  }\n  addBlock(block) {\n    this.blocks.push(block)\n    this._source.push(block.value)\n    if(block.data.childSections) {\n      if(this._children) {\n        this._children = this._children.concat(block.data.childSections)\n      } else {\n        this._children = block.data.childSections\n      }\n    }\n  }\n}\n\nexport default CodeSection\n","import debug from 'debug'\nimport {unless, truncValues} from './utils'\nimport CodeSection from './CodeSection'\n\nconst log = debug('CodeFile:log')\n\nclass Node {\n  constructor(name, source) {\n    this.name = name\n    this.source = source\n    this.children = []\n  }\n}\n\nclass CodeFile {\n  constructor(filename) {\n    unless(filename, () => {throw new SyntaxError('CodeFile must be instantiated with a filename')})\n    log('creating new CodeFile:', filename)\n    this.name = filename\n    this.codesections = []\n    this.addCodeSection('default')\n    this.root = this.findCodeSectionByName('default')\n\n  }\n\n  get sectionNames() {\n    return this.codesections.map(cs => cs.name)\n  }\n\n  addCodeSection(sectionName) {\n    const section = new CodeSection(sectionName)\n    this.codesections.push(section)\n    return section\n  }\n\n  findCodeSectionByName(sectionName) {\n    return this.codesections.find(s => s.name === sectionName)\n  }\n\n\n  addBlockToCodeSection(block) {\n    var section = this.findCodeSectionByName(block.data.section)\n    log\n    unless(section, () => { section = this.addCodeSection(block.data.section)})\n    section.addBlock(block)\n  }\n\n  buildDependencyTree(sectionName = 'default') {\n    const section = this.findCodeSectionByName(sectionName)\n    const tree = new Node(section.name, section.source)\n    if(section.children) {\n      tree.children = section.children.map(c => {\n        return this.buildDependencyTree(c)\n      })\n    }\n    return tree\n  }\n}\n\nexport default CodeFile\n","import debug from 'debug'\nimport CodeFile from './CodeFile'\nimport {unless} from './utils'\nimport fmt from 'fmt-obj'\nconst log = debug('CodeStore:log')\n\n\n\nclass CodeStore {\n\n  constructor() {\n    this.codefiles = []\n  }\n\n  get filenames() {\n    return this.codefiles.map(file => file.name)\n  }\n  addCodeFile(filename = 'index.js') {\n    var file = this.findCodeFileByName(filename)\n    if(file) {\n      throw new ReferenceError(`CodeFile ${filename} already exists`)\n    }\n    file = new CodeFile(filename)\n    this.codefiles.push(file)\n    return file\n  }\n\n  findCodeFileByName(filename) {\n    return this.codefiles.find(f => f.name == filename)\n  }\n\n  modifyNodeData(node) {\n    const data = node.data\n    const lang = node.lang\n    const {filename, section} = this.parseLang(lang)\n    data.filename = filename\n    data.section = section\n    // find sections identified in this block\n    const childSectionNames = this.listChildSectionNamesForNode(node)\n    // append the childnames to the node's data\n    data.childSections = childSectionNames\n    node.data = data\n    return node\n  }\n\n\n\n  addNode(node) {\n    node = this.modifyNodeData(node)\n\n    var {filename, section, childSections} = node.data\n    var file = this.findCodeFileByName(filename)\n    unless(file, () => { file = this.addCodeFile(filename)})\n    log('adding node to file:', filename, file.name)\n\n    const [default_, ...sectionNames] = file.sectionNames\n\n    // create any new sections on this file that this node contain\n    var filtered = childSections\n      .filter(section => !sectionNames.includes(section))\n    filtered.forEach(newSection => file.addCodeSection(newSection))\n    file.addBlockToCodeSection(node, section)\n    log('added node to file:', file.name)\n    log('filenames:', this.filenames)\n  }\n\n  listChildSectionNamesForNode(node) {\n    const lines = node.value.split('\\n')\n    const sectionTag = /^#\\S+$/\n    return lines\n    .map(line => line.trim())\n    .reduce((sections, line) => {\n      if(sectionTag.test(line)) {\n        sections.push(line)\n      }\n      return sections\n    }, [])\n  }\n\n  generateSource(filename = 'index.js') {\n    const file = this.findCodeFileByName(filename)\n    const tree = file.buildDependencyTree()\n    return this.buildSourceFromNode(tree)\n  }\n\n  buildSourceFromNode(node) {\n    let src = node.source\n    while(node.children.length) {\n      const child = node.children.pop()\n      const csrc = this.buildSourceFromNode(child)\n      src = src.replace(child.name,csrc)\n    }\n    return src\n  }\n\n  parseLang(lang) {\n\n    let ret = {filename: 'index.js', section: 'default'}\n    if(!lang) {\n      return ret\n    }\n\n    const s = lang.split('>')\n    if(!s.length) {\n      return ret\n    }\n\n    const cmd = s[1].trim()\n\n    const fileAndSection = /(\\S+)(#\\S+)$/\n    const file = /^(\\S+)$/\n    const section = /^(#\\S+)$/\n\n    if(fileAndSection.test(cmd)) {\n\n      const exc = fileAndSection.exec(cmd)\n      ret.filename = exc[1]\n      ret.section = exc[2]\n      if(ret.section === '#default') {\n        ret.section = 'default'\n      }\n      return ret\n    }\n    if(section.test(cmd)) {\n\n      ret.section = section.exec(cmd)[1]\n      return ret\n    }\n\n    if(file.test(cmd)) {\n      ret.filename = file.exec(cmd)[1]\n      return ret\n    }\n\n    return ret\n  }\n\n\n}\n\nexport default CodeStore\n","import remark from 'remark'\nimport visit from 'unist-util-visit'\nimport jetpack from 'fs-jetpack'\nimport debug from 'debug'\nimport fmt from 'fmt-obj'\nimport {truncValues} from './utils'\nimport CodeStore from './CodeStore'\n\nconst fs = jetpack\n\nconst log = debug('love-notes:log')\nconst err = debug('love-notes:err')\n\n\n\nfunction tangle(fptr, outdir = './docs') {\n  log('fptr:', fptr)\n  log('outdir:', outdir)\n  const contents = fs.read(fptr)\n  const store = new CodeStore()\n  const ast = remark().parse(contents)\n\n  visit(ast, 'code', node => {\n    node.data = node.data || {}\n    store.addNode(node)\n  })\n\n  log('files created:', store.codefiles.length)\n  const filenames = store.filenames\n  log('filenames: %O', filenames)\n  const files = filenames.map(file => {\n    return {source: store.generateSource(file), name: file}\n  })\n  log('files:\\n%O', files)\n  const pen = fs.cwd(outdir)\n  files.forEach(file => {\n    pen.write(file.name, file.source)\n  })\n  log('files created:\\n%O', pen.list().map(f => `${pen.cwd()}/${f}`))\n}\n\nexport default { tangle }\n"],"names":["none","obj","undefined","isNaN","unless","exp","cb","log","debug","CodeSection","name","SyntaxError","blocks","_children","_source","block","push","value","data","childSections","concat","join","Node","source","children","CodeFile","filename","codesections","addCodeSection","root","findCodeSectionByName","sectionName","section","find","s","addBlock","tree","map","buildDependencyTree","c","cs","CodeStore","codefiles","file","findCodeFileByName","ReferenceError","f","node","lang","parseLang","childSectionNames","listChildSectionNamesForNode","modifyNodeData","addCodeFile","sectionNames","default_","filtered","filter","includes","forEach","newSection","addBlockToCodeSection","filenames","lines","split","sectionTag","line","trim","reduce","sections","test","buildSourceFromNode","src","length","child","pop","csrc","replace","ret","cmd","fileAndSection","exc","exec","fs","jetpack","err","tangle","fptr","outdir","contents","read","store","ast","remark","parse","addNode","files","generateSource","pen","cwd","write","list"],"mappings":"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"}